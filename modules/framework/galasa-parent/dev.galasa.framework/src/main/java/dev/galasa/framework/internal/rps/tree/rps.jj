/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. rps.jj */
/*@egen*/options {
	STATIC=false;
	IGNORE_CASE=false;
	           
	FORCE_LA_CHECK=false;
	                    
}   

PARSER_BEGIN(RpsResolver)

package tree;

public class RpsResolver/*@bgen(jjtree)*/implements RpsResolverTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTRpsResolverState jjtree = new JJTRpsResolverState();

/*@egen*/

}
PARSER_END(RpsResolver)

TOKEN : 
{
    <CHARACTER    : ["A"-"Z","a"-"z","0"-"9"] >  |
    <LEFTBRACKET  : "{" > |
    <RIGHTBRACKET : "}" > |
    <BETWEEN      : "-" >
} 

ASTStart Start() : {/*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
        try {
/*@egen*/

	( 
		Constant() |
		Variable()
    )+ 
    <EOF>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
  
}


void Constant() : 
{/*@bgen(jjtree) Constant */
  ASTConstant jjtn000 = new ASTConstant(JJTCONSTANT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) Constant */
  try {
/*@egen*/
  t = <CHARACTER>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
   jjtn000.jjtSetValue(t.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
  
}


void Variable() : 
{/*@bgen(jjtree) Variable */
  ASTVariable jjtn000 = new ASTVariable(JJTVARIABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) Variable */
  try {
/*@egen*/
  <LEFTBRACKET>
  (
     LOOKAHEAD(2)
     MultiRange() |
     SingleRange()
  )+
  <RIGHTBRACKET>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
 
}


void SingleRange() :
{/*@bgen(jjtree) SingleRange */
  ASTSingleRange jjtn000 = new ASTSingleRange(JJTSINGLERANGE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) SingleRange */
   try {
/*@egen*/
   Constant()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}


void MultiRange() :
{/*@bgen(jjtree) MultiRange */
  ASTMultiRange jjtn000 = new ASTMultiRange(JJTMULTIRANGE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) MultiRange */
   try {
/*@egen*/
   Constant()
   <BETWEEN>
   Constant()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}